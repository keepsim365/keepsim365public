import os
import json
import csv
import logging
from datetime import datetime

# Configure logging
log_filename = f'process_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
logging.basicConfig(filename=log_filename, level=logging.INFO, format='%(asctime)s - %(message)s')

# Directory containing the JSON files
json_folder = r'C:\Users\g48430250\Desktop\code\0210 Connect Backup Data\0210 Connect Backup Data\users'  # Adjust your path here

# Output CSV file
output_csv = 'output_data.csv'

# Columns for the CSV (adjust based on JSON structure)
csv_columns = ['id', 'first_name', 'last_name', 'username', 'phone_type', 'routing_profile', 'retail_voice']

def process_json_files():
    data_rows = []

    try:
        # Loop through all files in the folder
        for filename in os.listdir(json_folder):
            if filename.endswith('.json'):
                filepath = os.path.join(json_folder, filename)

                # Read each JSON file
                with open(filepath, 'r') as json_file:
                    try:
                        data = json.load(json_file)
                        print(f"\nProcessing file: {filename}")  # Debugging

                        # Ensure 'users' key exists in the JSON
                        if 'users' not in data:
                            logging.warning(f"Missing 'users' key in {filename}")
                            continue

                        # Loop through each user in the 'users' list
                        for user in data['users']:
                            # Extract relevant fields (based on the structure)
                            row = {
                                'id': user.get('Id', ''),
                                'first_name': user.get('IdentityInfo', {}).get('FirstName', ''),
                                'last_name': user.get('IdentityInfo', {}).get('LastName', ''),
                                'username': user.get('Username', ''),
                                'phone_type': user.get('PhoneConfig', {}).get('PhoneType', ''),
                                'routing_profile': user.get('RoutingProfileId', ''),
                                'retail_voice': user.get('Tags', {}).get('Retail Voice', '')  # Adjust for more tags if needed
                            }

                            print(f"Extracted Row: {row}")  # Debugging print to see extracted fields

                            # Append the row if the required fields are found
                            if row['id'] and row['username']:
                                data_rows.append(row)
                            else:
                                logging.warning(f"Missing required fields in {filename}")

                        logging.info(f'Successfully processed {filename}')
                    except json.JSONDecodeError as e:
                        logging.error(f'Error decoding JSON from {filename}: {e}')

        # Write to CSV
        with open(output_csv, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=csv_columns)
            writer.writeheader()

            if data_rows:
                writer.writerows(data_rows)
                print(f"Data written to {output_csv}: {data_rows}")  # Debugging
                logging.info(f'Successfully wrote data to {output_csv}')
            else:
                print("No data rows to write.")  # Debugging
                logging.warning('No data rows found to write to CSV.')
    except Exception as e:
        logging.error(f'Error processing files: {e}')

if __name__ == '__main__':
    process_json_files()
