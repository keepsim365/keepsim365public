from flask import Flask, Response, request, jsonify
import boto3
import os
import json

app = Flask(__name__)

# Single-page HTML/JS for React + Material-UI
INDEX_HTML = """<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>AWS Connect Dashboard</title>
    <!-- Material UI Fonts & Icons -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <!-- React & ReactDOM -->
    <script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <!-- Babel for JSX transformation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <!-- Material UI Core (v5) -->
    <script src="https://unpkg.com/@mui/material@5.0.0-rc.0/umd/material-ui.development.js"></script>
    <script src="https://unpkg.com/@mui/material@5.0.0-rc.0/umd/material-ui.umd.js"></script>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      const {
        Button, TextField, Container, Typography, Paper,
        Table, TableBody, TableCell, TableContainer, TableHead, TableRow
      } = MaterialUI;

      // -- Reusable Table Components ------------------------------------------

      function UserTable({ data }) {
        // data is an array of user summaries
        return (
          <TableContainer component={Paper} style={{ marginTop: '1rem' }}>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <TableCell><b>ID</b></TableCell>
                  <TableCell><b>ARN</b></TableCell>
                  <TableCell><b>Username</b></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {data.map((user) => (
                  <TableRow key={user.Id}>
                    <TableCell>{user.Id}</TableCell>
                    <TableCell>{user.Arn}</TableCell>
                    <TableCell>{user.Username}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        );
      }

      function RoutingProfileTable({ data }) {
        // data is an array of routing profile summaries
        return (
          <TableContainer component={Paper} style={{ marginTop: '1rem' }}>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <TableCell><b>Name</b></TableCell>
                  <TableCell><b>ID</b></TableCell>
                  <TableCell><b>ARN</b></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {data.map((profile) => (
                  <TableRow key={profile.Id}>
                    <TableCell>{profile.Name}</TableCell>
                    <TableCell>{profile.Id}</TableCell>
                    <TableCell>{profile.Arn}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        );
      }

      function QueueTable({ data }) {
        // data is an array of queue summaries
        return (
          <TableContainer component={Paper} style={{ marginTop: '1rem' }}>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <TableCell><b>Name</b></TableCell>
                  <TableCell><b>ID</b></TableCell>
                  <TableCell><b>ARN</b></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {data.map((queue) => (
                  <TableRow key={queue.Id}>
                    <TableCell>{queue.Name}</TableCell>
                    <TableCell>{queue.Id}</TableCell>
                    <TableCell>{queue.Arn}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        );
      }

      // ... Add more specialized tables if you like, e.g. for security profiles, hours, etc.

      function ResultsViewer({ data }) {
        if (!data) return null;

        // Check if the data contains known keys, then render a specialized table
        if (data.UserSummaryList) {
          return <UserTable data={data.UserSummaryList} />;
        } else if (data.RoutingProfileSummaryList) {
          return <RoutingProfileTable data={data.RoutingProfileSummaryList} />;
        } else if (data.QueueSummaryList) {
          return <QueueTable data={data.QueueSummaryList} />;
        }
        // Add more if statements for other specialized lists, e.g. data.HoursOfOperationSummaryList, etc.

        // Fallback: show raw JSON
        return (
          <pre style={{ backgroundColor: '#f4f4f4', padding: '1rem', marginTop: '1rem' }}>
            {JSON.stringify(data, null, 2)}
          </pre>
        );
      }

      // -- Main App ----------------------------------------------------------

      function App() {
        const [instanceId, setInstanceId] = React.useState('');
        const [accessKeyId, setAccessKeyId] = React.useState('');
        const [secretKey, setSecretKey] = React.useState('');
        const [data, setData] = React.useState(null);
        const [error, setError] = React.useState('');
        const [loading, setLoading] = React.useState(false);

        // Generic fetch function
        const fetchData = async (endpoint) => {
          setLoading(true);
          setError('');
          setData(null);
          try {
            const response = await fetch(endpoint, {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({ instanceId, accessKeyId, secretKey })
            });
            const result = await response.json();
            if (!response.ok) {
              setError(result.error || 'Error fetching data');
            } else {
              setData(result);
            }
          } catch (err) {
            setError(err.toString());
          }
          setLoading(false);
        };

        // Export data as text
        const exportData = () => {
          if (!data) return;
          const fileData = JSON.stringify(data, null, 2);
          const blob = new Blob([fileData], {type: 'text/plain'});
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = 'data.txt';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        };

        return (
          <Container maxWidth="md" style={{ marginTop: '2rem' }}>
            <Paper style={{ padding: '2rem' }}>
              <Typography variant="h4" gutterBottom>
                AWS Connect Dashboard
              </Typography>
              <TextField
                label="AWS Connect Instance ID"
                fullWidth
                margin="normal"
                value={instanceId}
                onChange={(e) => setInstanceId(e.target.value)}
              />
              <TextField
                label="AWS Access Key ID"
                fullWidth
                margin="normal"
                value={accessKeyId}
                onChange={(e) => setAccessKeyId(e.target.value)}
              />
              <TextField
                label="AWS Secret Key"
                type="password"
                fullWidth
                margin="normal"
                value={secretKey}
                onChange={(e) => setSecretKey(e.target.value)}
              />

              <div style={{ marginTop: '1rem' }}>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={() => fetchData('/api/users')}
                  style={{ marginRight: '0.5rem' }}
                >
                  Fetch Users
                </Button>
                <Button
                  variant="contained"
                  color="secondary"
                  onClick={() => fetchData('/api/routing-profiles')}
                  style={{ marginRight: '0.5rem' }}
                >
                  Fetch Routing Profiles
                </Button>
                <Button
                  variant="contained"
                  style={{ marginRight: '0.5rem' }}
                  onClick={() => fetchData('/api/queues')}
                >
                  Fetch Queues
                </Button>
                <Button
                  variant="contained"
                  style={{ marginRight: '0.5rem' }}
                  onClick={() => fetchData('/api/security-profiles')}
                >
                  Fetch Security Profiles
                </Button>
                <Button
                  variant="contained"
                  style={{ marginRight: '0.5rem' }}
                  onClick={() => fetchData('/api/hours-of-operations')}
                >
                  Fetch Hours
                </Button>
                <Button
                  variant="contained"
                  style={{ marginRight: '0.5rem' }}
                  onClick={() => fetchData('/api/contact-flows')}
                >
                  Fetch Contact Flows
                </Button>
              </div>

              {loading && (
                <Typography variant="body1" style={{ marginTop: '1rem' }}>
                  Loading...
                </Typography>
              )}
              {error && (
                <Typography variant="body1" color="error" style={{ marginTop: '1rem' }}>
                  {error}
                </Typography>
              )}

              {/* Display results in a specialized table or raw JSON */}
              <ResultsViewer data={data} />

              {data && (
                <Button variant="outlined" onClick={exportData} style={{ marginTop: '1rem' }}>
                  Export Data
                </Button>
              )}
            </Paper>
          </Container>
        );
      }

      ReactDOM.render(<App />, document.getElementById('root'));
    </script>
  </body>
</html>
"""

@app.route("/")
def index():
    # Return the raw HTML so that Jinja doesn't parse the curly braces
    return Response(INDEX_HTML, mimetype="text/html")

# -- API Routes --------------------------------------------------------------

@app.route("/api/users", methods=["POST"])
def get_users():
    data = request.get_json()
    instance_id = data.get("instanceId")
    access_key_id = data.get("accessKeyId")
    secret_key = data.get("secretKey")

    try:
        connect_client = boto3.client(
            "connect",
            region_name="eu-west-2",
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_key,
        )
        response = connect_client.list_users(InstanceId=instance_id)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/routing-profiles", methods=["POST"])
def get_routing_profiles():
    data = request.get_json()
    instance_id = data.get("instanceId")
    access_key_id = data.get("accessKeyId")
    secret_key = data.get("secretKey")

    try:
        connect_client = boto3.client(
            "connect",
            region_name="eu-west-2",
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_key,
        )
        response = connect_client.list_routing_profiles(InstanceId=instance_id)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/queues", methods=["POST"])
def get_queues():
    data = request.get_json()
    instance_id = data.get("instanceId")
    access_key_id = data.get("accessKeyId")
    secret_key = data.get("secretKey")

    try:
        connect_client = boto3.client(
            "connect",
            region_name="eu-west-2",
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_key,
        )
        response = connect_client.list_queues(InstanceId=instance_id)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/security-profiles", methods=["POST"])
def get_security_profiles():
    data = request.get_json()
    instance_id = data.get("instanceId")
    access_key_id = data.get("accessKeyId")
    secret_key = data.get("secretKey")

    try:
        connect_client = boto3.client(
            "connect",
            region_name="eu-west-2",
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_key,
        )
        response = connect_client.list_security_profiles(InstanceId=instance_id)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/hours-of-operations", methods=["POST"])
def get_hours_of_operations():
    data = request.get_json()
    instance_id = data.get("instanceId")
    access_key_id = data.get("accessKeyId")
    secret_key = data.get("secretKey")

    try:
        connect_client = boto3.client(
            "connect",
            region_name="eu-west-2",
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_key,
        )
        response = connect_client.list_hours_of_operations(InstanceId=instance_id)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/contact-flows", methods=["POST"])
def get_contact_flows():
    data = request.get_json()
    instance_id = data.get("instanceId")
    access_key_id = data.get("accessKeyId")
    secret_key = data.get("secretKey")

    try:
        connect_client = boto3.client(
            "connect",
            region_name="eu-west-2",
            aws_access_key_id=access_key_id,
            aws_secret_access_key=secret_key,
        )
        response = connect_client.list_contact_flows(InstanceId=instance_id)
        return jsonify(response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ---------------------------------------------------------------------------

if __name__ == "__main__":
    # Launch the Flask development server
    app.run(debug=True)
