import boto3
import csv

# Initialize the AWS Connect client
connect_client = boto3.client('connect')

# Specify your AWS Connect instance ID
instance_id = 'f79038c8-1351-4813-94bf-5c06cfcbf09f'

# CSV output file
output_csv_file = 'connect_users_security_profiles_with_names.csv'

# Function to read usernames from a text file
def read_usernames_from_file(filename):
    with open(filename, 'r') as file:
        usernames = [line.strip() for line in file.readlines()]
    return usernames

# Function to get user details (IDs) by username
def get_user_id_by_username(username, instance_id):
    try:
        paginator = connect_client.get_paginator('list_users')
        for page in paginator.paginate(InstanceId=instance_id):
            for user in page['UserSummaryList']:
                if user['Username'] == username:
                    return user['Id']
        print(f"Username {username} not found.")
        return None
    except Exception as e:
        print(f"Error fetching user ID for username: {username}, Error: {str(e)}")
        return None

# Function to get security profiles for each user by their user ID
def get_security_profiles(user_id, instance_id):
    try:
        response = connect_client.describe_user(
            InstanceId=instance_id,
            UserId=user_id
        )
        security_profiles = response['User']['SecurityProfileIds']
        return security_profiles
    except connect_client.exceptions.ResourceNotFoundException:
        print(f"User ID: {user_id} not found on AWS Connect")
        return []
    except Exception as e:
        print(f"Error fetching details for User ID: {user_id}, Error: {str(e)}")
        return []

# Function to get all security profile names and map them to their IDs with pagination handling
def get_security_profile_names(instance_id):
    try:
        profile_map = {}
        paginator = connect_client.get_paginator('list_security_profiles')

        # Iterate through each page of results to handle pagination
        for page in paginator.paginate(InstanceId=instance_id):
            for profile in page['SecurityProfileSummaryList']:
                profile_id = profile['Id']
                profile_name = profile['Name']
                profile_map[profile_id] = profile_name
                print(f"Mapping: Profile ID: {profile_id}, Profile Name: {profile_name}")  # Debugging line to verify profile name fetching

        return profile_map
    except Exception as e:
        print(f"Error fetching security profile names: {str(e)}")
        return {}

# Main function to list all users and their security profiles and write to CSV
def list_users_and_security_profiles_from_file(filename, instance_id, output_csv_file):
    # Read usernames from the file
    usernames = read_usernames_from_file(filename)

    # Get security profile names and map them to IDs
    security_profile_map = get_security_profile_names(instance_id)
    
    # Open CSV file for writing
    with open(output_csv_file, mode='w', newline='') as csv_file:
        fieldnames = ['Username', 'User ID', 'Security Profile IDs', 'Security Profile Names']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        writer.writeheader()

        # For each username, get their user ID and security profiles and write to CSV
        for username in usernames:
            user_id = get_user_id_by_username(username, instance_id)

            if user_id:
                security_profile_ids = get_security_profiles(user_id, instance_id)

                # Get corresponding security profile names
                security_profile_names = [security_profile_map.get(profile_id, 'Unknown') for profile_id in security_profile_ids]

                writer.writerow({
                    'Username': username,
                    'User ID': user_id,
                    'Security Profile IDs': ','.join(security_profile_ids),
                    'Security Profile Names': ','.join(security_profile_names)
                })

                print(f"Username: {username}, User ID: {user_id}, Security Profiles: {security_profile_names}")

# Execute the script
if __name__ == "__main__":
    input_file = 'username.txt'  # Text file with one username per line
    list_users_and_security_profiles_from_file(input_file, instance_id, output_csv_file)
    print(f"Security profiles for all users have been written to {output_csv_file}")
