#!/usr/bin/env python3
"""
Repository Consolidator - Extracts all files from a Git repository into a single text file
Usage: python consolidate_repo.py
"""

import os
import sys
import subprocess
import mimetypes
from pathlib import Path

def is_binary_file(filepath):
    """Check if a file is binary by examining its content."""
    try:
        with open(filepath, 'rb') as f:
            chunk = f.read(1024)
            if b'\0' in chunk:
                return True
        return False
    except:
        return True

def get_git_info():
    """Get basic Git repository information."""
    try:
        repo_name = subprocess.check_output(['git', 'rev-parse', '--show-toplevel'], 
                                          stderr=subprocess.DEVNULL).decode().strip()
        repo_name = os.path.basename(repo_name)
        
        branch = subprocess.check_output(['git', 'branch', '--show-current'], 
                                       stderr=subprocess.DEVNULL).decode().strip()
        
        last_commit = subprocess.check_output(['git', 'log', '-1', '--pretty=format:%h - %s (%an, %ar)'], 
                                            stderr=subprocess.DEVNULL).decode().strip()
        
        return repo_name, branch, last_commit
    except:
        return "Unknown", "Unknown", "Unknown"

def get_tracked_files():
    """Get list of all tracked files in the Git repository."""
    try:
        result = subprocess.check_output(['git', 'ls-files'], stderr=subprocess.DEVNULL)
        return result.decode().strip().split('\n')
    except:
        # Fallback to all files if not in a git repo
        files = []
        for root, dirs, filenames in os.walk('.'):
            # Skip common directories
            dirs[:] = [d for d in dirs if d not in {'.git', 'node_modules', '__pycache__', '.vscode', 'dist', 'build'}]
            for filename in filenames:
                files.append(os.path.relpath(os.path.join(root, filename)))
        return files

def should_include_file(filepath):
    """Determine if a file should be included in the consolidation."""
    # Skip directories
    if not os.path.isfile(filepath):
        return False
    
    # Skip binary extensions
    binary_extensions = {
        '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.pdf', '.zip', 
        '.tar', '.gz', '.exe', '.dll', '.so', '.dylib', '.class', '.jar', 
        '.war', '.ear', '.mp3', '.mp4', '.avi', '.mov', '.wmv', '.flv'
    }
    
    if Path(filepath).suffix.lower() in binary_extensions:
        return False
    
    # Skip files larger than 1MB
    try:
        if os.path.getsize(filepath) > 1024 * 1024:
            return False
    except:
        return False
    
    # Check if file is binary
    if is_binary_file(filepath):
        return False
    
    return True

def consolidate_repository():
    """Main function to consolidate repository files."""
    output_file = "consolidated_repository.txt"
    
    # Get repository information
    repo_name, branch, last_commit = get_git_info()
    
    # Get all tracked files
    files = get_tracked_files()
    
    print(f"Found {len(files)} files in repository")
    
    with open(output_file, 'w', encoding='utf-8', errors='ignore') as outfile:
        # Write header information
        outfile.write("=" * 60 + "\n")
        outfile.write("REPOSITORY CONSOLIDATION\n")
        outfile.write("=" * 60 + "\n\n")
        
        outfile.write(f"Repository: {repo_name}\n")
        outfile.write(f"Branch: {branch}\n")
        outfile.write(f"Last Commit: {last_commit}\n")
        outfile.write(f"Total Files: {len(files)}\n\n")
        
        # Write file structure
        outfile.write("=" * 60 + "\n")
        outfile.write("REPOSITORY STRUCTURE\n")
        outfile.write("=" * 60 + "\n\n")
        
        for file in sorted(files):
            outfile.write(f"{file}\n")
        
        outfile.write("\n" + "=" * 60 + "\n")
        outfile.write("FILE CONTENTS\n")
        outfile.write("=" * 60 + "\n\n")
        
        # Process each file
        processed_count = 0
        for file in files:
            if should_include_file(file):
                try:
                    outfile.write("\n" + "=" * 70 + "\n")
                    outfile.write(f"FILE PATH: {file}\n")
                    outfile.write(f"FILE NAME: {os.path.basename(file)}\n")
                    outfile.write(f"EXTENSION: {Path(file).suffix}\n")
                    outfile.write("=" * 70 + "\n")
                    
                    with open(file, 'r', encoding='utf-8', errors='ignore') as infile:
                        content = infile.read()
                        outfile.write(content)
                    
                    outfile.write("\n\n")
                    processed_count += 1
                    
                except Exception as e:
                    outfile.write(f"Error reading file: {e}\n\n")
                    
                print(f"Processed: {file}")
    
    print(f"\nConsolidation complete!")
    print(f"Output file: {output_file}")
    print(f"Processed {processed_count} files")
    
    # Show file size
    size = os.path.getsize(output_file)
    if size > 1024 * 1024:
        print(f"File size: {size / (1024 * 1024):.1f} MB")
    else:
        print(f"File size: {size / 1024:.1f} KB")

if __name__ == "__main__":
    if not os.path.exists('.git') and not any(os.path.exists(f) for f in os.listdir('.')):
        print("Warning: This doesn't appear to be a Git repository")
        print("The script will still work but may include unwanted files")
    
    consolidate_repository()
